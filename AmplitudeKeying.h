#ifndef AMPLITUDEKEYING_H
#define AMPLITUDEKEYING_H


class AmplitudeKeying
{
public:
    AmplitudeKeying();
private:
    float S_AM; // амплитудно-манипулированный сигнал
                // S_AM(t) = A(t) * cos(w_0 * t)
    float w_0;  // круговая частота несущего колебания
                // w_0 = 2 * pi * T_0
                // (задается через период, T_0 - время одного колебания исходного сигнала)
    float A;    // модулировання амплитуда несущего колебания
                // A(t) = sum[k=0; inf] (d_k * U_m(t - k * T_im))
    float U_m;  // импульс прямоугольной формы длительностью T_im (T impulse) и
                // единичной энергии
    float T_im; // длительность одного импульса (посылки)
    int M;      // количество возможных двоичных полследовательностей, каждой
                // из которых сопоставлена одна посылка, M = 2^m
                // m - отношение разности макс и мин амплитуд к их сумме
    float d;    // расстояние между уровнями соседних посылок
    float R;    // скорость передачи; R = 1 / T_im
    float d_k;  // случайные велечины {a_i, i = [1,M]}
    float a_i;  // a_i = (2 * i - 1 - M) * (d / 2), i = [1,M]
};

#endif // AMPLITUDEKEYING_H
